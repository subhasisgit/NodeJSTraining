use bankingdb

db.customers.insert({customerid:4654, name:"Subh"});

db.customers.insert({_id:6666,name:"Subh",email:"sm@gmail.com"})
db.customers.find()
db.customers.update({_id:5555},{$set:{name:"Rock"}});
db.customers.find({"name":"Rock"},{name:1,_id:0});

db.contacts.insert({phone:2222})

db.getCollectionInfos();

32 bit machine

mongod --port 27017 --storageEngine=mmapv1 --dbpath path







Go to

C:\Program Files\MongoDB 2.6 Standard\bin











mongod --dbpath F:\NIIT_Mongodb --port 27017





replica set



mongod --port "PORT" --dbpath "YOUR_DB_DATA_PATH" --replSet "REPLICA_SET_INSTANCE_NAME"

mongod --port 27017 --dbpath "D:\set up\mongodb\data" --replSet rs0



to check replica set



rs.initiate()

rs.config()

rs.status()

db.isMaster()

replica on multiple machines

rs.add("ipaddress:27017")



>help

To check current db

db>

db.stats()



to drop database

db.dropDatabase()



post = {"title" : "My Blog Post",

... "content" : "Here's my blog post.",

... "date" : new Date()}

db.blog.insert(post)



db.post.insert([



{

title: 'MongoDB Introduction',

portrayal: 'MongoDB is no sql database',

by: ' j2eebrain ',

url: 'http://www.j2eebrain.com',

labels: ['MongoDB', 'database', 'Nosql'],

likes: 100

},



{

title: 'Nosql Database',

depiction: 'Nosql database doesn't have tables',

by: 'j2eebrain',

url: 'http://www.j2eebrain.com',

labels: ['MongoDB', 'database', 'Nosql'],

likes: 20,



remarks: [

{

user:'user1',

message: 'My first education',

datecreated: new Date(2014,12,11,3,33),

like: 0

}

]

}

])

























db.customer.update({'name':'Suja'},{$set:{'balance':5986798}})

db.blog.remove({title : "My Blog Post"})



db.blog.drop()





To start mongodb, type mongo



-----------------

show dbs



---------------

show collections

-------------------

Movie ---Db

db.movies.find();



> use newdb;

switched to db newdb

>expenditure={Rent:5000,Transport:3000,Dress:3000,Recharge:1500,

Food:6000,Misc:4000,PlannedDate:new Date('02/26/2015')};

>db.homebudgetdb.insert(expenditure);

>db.homebudgetdb.find();



> book = { author: 'Jamie Munro', title: '20 Recipes for Programming PhoneGap',

published: new Date('04/03/2012') };

{

"author" : "Jamie Munro",

"title" : "20 Recipes for Programming PhoneGap",

"published" : ISODate("2012-04-03T07:00:00Z")

}

> db.books.insert(book);

> db.books.find();

{ "_id" : ObjectId("5063d1d89e302eaf24b259a0"), "author" : "Jamie Munro",

"title" : "20 Recipes for Programming PhoneGap",

"published" : ISODate("2012-04-03T07:00:00Z") }





book = { title: '50 Tips and Tricks for MongoDB Developers',

author: 'Kristina Chodorow',

published: new Date('05/06/2011'),

keywords: ['design', 'implementation',

'optimization'] };



db.books.update( { author: "Kristina Chodorow" },

{ "$push": { "keywords": "developer" } } );



db.books.find({}, {title:1, _id:0});



-----------------------------------------------



db.createCollection(<name>, { capped: <boolean>,

                              autoIndexId: <boolean>,

                              size: <number>,

                              max: <number>,

                              storageEngine: <document>,

                              validator: <document>,

                              validationLevel: <string>,

                              validationAction: <string>,

                              indexOptionDefaults: <document>,

                              viewOn: <string>,

                              pipeline: <pipeline>,

                              collation: <document> } )





db.createCollection("log", { capped : true, size : 5242880, max : 5000 } )

This command creates a collection named log with a maximum size of 5 megabytes and a maximum of 5000 documents.



db.createCollection( "contacts",
   {
      validator: { $or:
         [
            { phone: { $type: "string" } },
            { email: { $regex: /@mongodb\.com$/ } },
            { status: { $in: [ "Unknown", "Incomplete" ] } }
         ]
      }
   }


It will return error

db.contacts.insert( { name: "Amanda", status: "Updated" } )



collation

db.createCollection( "myColl", { collation: { locale: "fr" } } );



Specify Storage Engine Options

db.createCollection(

   "users",

   { storageEngine: { wiredTiger: { configString: "<option>=<setting>" } } }

)



db.createCollection( "contacts", { capped : true, size : 5242880, max : 5000, validator:

  { $and:

      [

          { phone: { $type: "string" } },

          { email: { $regex: /@mongodb\.com$/ } },

          { status: { $in: [ "Unknown", "Incomplete" ] } }

      ]

   },

   validationLevel : "strict",

   validationAction : "error"

  }

)



 db.test.insert({date: ISODate()})

 db.test.insert({date: new Date()})

var myDate = new Date(2014, 11, 12, 14, 12);

db.collection.insert({ "date": myDate });



1.create customer collection

2.create address collection

3.insert address data

4. insert customer data with address ref





> var schematodo = db.tasks.findOne();

> for (var key in schematodo) { print (key) ; }









> db.foo.find()

> db.foo.insert({"name":"abdul"})

> db.foo.find()

{ "_id" : ObjectId("4e93037bbf6f1dd3a0a9541a"), "name" : "abdul" }

> item = db.foo.findOne()

{ "_id" : ObjectId("4e93037bbf6f1dd3a0a9541a"), "name" : "abdul" }

> db.foo.update({"_id" :ObjectId("4e93037bbf6f1dd3a0a9541a") },{$set : {"new_field":1}})

> db.foo.find()

{ "_id" : ObjectId("4e93037bbf6f1dd3a0a9541a"), "new_field" : 1, "name" : "abdul" }



-------------------------------------------------------------

With two collections



db.address.aggregate([

    {

      $lookup:

        {

          from: "customer",

          localField: "_id",

          foreignField: "addressRef",

          as: "out_doc"

        }

   }

])

===============================================

With Three collections



db.customer.aggregate(  [{

        $lookup: {

           from: "address",

           localField: "addressRef",

           foreignField: "_id",

           as: "addressInfo"

        }

    },



    {

        $unwind: "$addressInfo"

    },

    {

        $lookup: {

           from: "branch",

           localField: "branchRef",

           foreignField: "_id",

           as: "branchInfo"

        }

    }

    ,



    {

        $unwind: "$branchInfo"

    }



    ])

------------------------------------------------

 aggrgate with Projection

db.customer.aggregate( [ { $project : { name : 1 , password : 1 } } ] )

-----------------------------------------------------------



-- 1 to include



db.address.aggregate([

    {

      $lookup:

        {

          from: "customer",

          localField: "_id",

          foreignField: "addressRef",

          as: "out_doc"

        }

   },

	{ $project : { doorNo : 1 , streetName : 1 } }



])

-----------------------------------------------------------

lookup with project



db.address.aggregate([

    {

      $lookup:

        {

          from: "customer",

          localField: "_id",

          foreignField: "addressRef",

          as: "out_doc"

        }

   },

	{ $project : { doorNo : 1 , streetName : 1 , name:"$out_doc.name"} }



])

------------------------------------------------------------



db.customer.aggregate(  [{

        $lookup: {

           from: "address",

           localField: "addressRef",

           foreignField: "_id",

           as: "addressInfo"

        }

    },

    {

        $lookup: {

           from: "branch",

           localField: "branchRef",

           foreignField: "_id",

           as: "branchInfo"

        }

    }

    ,



    {

         $project: {name:"$addressInfo.streetName",address:"$branchInfo.address"}

    }



    ])



------------------------------------------------------------

db.createCollection( "account", { capped : false, size : 5242880, max : 5000, validator:

  { $and:

      [

          { actNo: { $type: "number" } },

          { type: { $in: [ "savings", "recurring" ] } },

          { balance: { $type: "number" } }

      ]

   },

   validationLevel : "strict",

   validationAction : "error"

  }

)

--------------------------------------

db.createCollection( "transaction", { capped : false, size : 5242880, max : 5000, validator:

  { $and:

      [

          { tranId: { $type: "number" } },

          { dot: { $type: "date" } },

          { amt: { $type: "number" }},

         {tranType:{$type:"string"}}

      ]

   },

   validationLevel : "strict",

   validationAction : "error"

  }

)

--------------------------------------------------------

db.transaction.insert({

    tranId:776645,

    dot: ISODate("2017-04-03T07:00:00Z"),

    amt:7000,

    tranType:"recurring"



})

-----------------------------------------------

var actObj=db.account.findOne({$project:{_id})

print (actObj);



db.transaction.insert({

    tranId:773345,

    dot: ISODate("2016-07-07T07:00:00Z"),

    amt:7500,

    tranType:"savings",

    accountRef:actObj



})



____________________________________________________

Group By date



db.transaction.aggregate(

   [

      {

        $group : {

           _id : { month: { $month: "$dot" }, day: { $dayOfMonth: "$dot" }, year: { $year: "$dot" } },

           totalPrice: { $sum: "$amt" },

           averageTransaction: { $avg: "$amt" },

           count: { $sum: 1 }

        }

      }

   ]

)

----------------------------------------------

Group By transaction type



db.transaction.aggregate(

   [

      {

        $group : {

           _id :"$tranType",

           totalPrice: { $sum: "$amt" },

           averageTransaction: { $avg: "$amt" },

           count: { $sum: 1 }

        }

      }

   ]

)

----------------------------------

db.transaction.aggregate(

   [

      {

        $group : {

           _id :"$tranType",

           totalPrice: { $sum: "$amt" },

           averageTransaction: { $avg: "$amt" },

           bonus:{$sum: { $multiply: [ "$amt", 0.1 ] }},



           count: { $sum: 1 }

        }

      }

   ]

)

------------------------------------------------

Retrieve Distinct Values



db.transaction.aggregate( [ { $group : { _id : "$amt" } } ] )

------------------------------------------------------------

Randomly selecting number of records



db.transaction.aggregate(

   [ { $sample: { size: 2 } } ]

)

----------------------------------------------------

Sorting

db.transaction.aggregate(

   [

     { $sort : { amt : -1, dot: 1 } }

   ]

)

---------------------------------------

index

db.transaction.createIndex( { dot: 1, tranType: 1 } )

-----------------------------------------------------------

Map and Reduce



var mapFunction1 = function() {

                       emit(this.tranType, this.amt);

                   };

var reduceFunction1 = function(keyTranType, valuesAmt) {

                          return Array.sum(valuesAmt);

                      };



db.transaction.mapReduce(

                     mapFunction1,

                     reduceFunction1,

                     { out: "map_reduce_example" }

                   ).find()

-------------------------------------------------------------------

